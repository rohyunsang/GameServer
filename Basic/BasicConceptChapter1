program : code + data
Run => program : code + data + heap + stack 

Program is on disk, Process is on RAM memory

multiple processes running => Multi-Processing 

void main()
{
    t2 = CreateThread(Thread2Proc);
}

void Thread2Proc()
{
    t3 = CreateThread(Thread3Proc);
}

void Thread3Proc()
{
    t4 = CreateThread(Thread4Proc);
}

A program consists of many subroutines or functions

When a function finishes executing, it returns to the point 
where it executed the caller function that called itself.
this information is stored is called the call stack.

1. 생성
2. 실행 중 (Runnable)
3. 대기 중 (Blocked)
4. 소멸 (Dead)

if Runnable another thread, Dead main thread => Zombie thread

modern cpp create thread 
std::thread t1(ThreadProc, 123);

Context Switch 

if two thread use one variable => data race => Possibility incorrect calculation result

동기화(synchronize) : 대표적인 것이 임계 영역과 뮤텍스, lock 기법.
임계 영역(critical section) 
mutex : dont use variable until current thread finish
mutex(mutual exclusion)

lock_guard : auto unlcok class

Contention : two Threads access one data

DeadLock On GameServer 
1. Cpu usage is very low or 0%
2. Cant use Client 

if we use CRITICAL_SECTION, we can see where the deadlock is coming from.

How to use CRITICAL_SECTION :

Event : 
    Reset : no event
    Set : have an event 

Consider waiting event over two threads 
    automatic event : wake up one thread
    manaual event : wake up all threads 
    
mutex or critical section allows only one thread to access a data 
but semaphore is different 

atomic operation (원자 조작)
    AtomicAdd()
    AtomicExchange()
    AtomciCompareExchange()


